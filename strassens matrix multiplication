import numpy as np

def strassen(x, y):
    if np.shape(x) != np.shape(y) or np.shape(x)[0] % 2 != 0 or np.shape(x)[1] % 2 != 0:
        raise ValueError("Both matrices must have the same shape and dimensions that are a power of 2.")

    if np.shape(x)[0] == 1:
        return x * y

    n = np.shape(x)[0]
    half_n = n // 2

    a11 = x[:half_n, :half_n]
    a12 = x[:half_n, half_n:]
    a21 = x[half_n:, :half_n]
    a22 = x[half_n:, half_n:]

    b11 = y[:half_n, :half_n]
    b12 = y[:half_n, half_n:]
    b21 = y[half_n:, :half_n]
    b22 = y[half_n:, half_n:]

    m1 = strassen(a11, b12 - b22)
    m2 = strassen(a11 + a12, b22)
    m3 = strassen(a21 + a22, b11)
    m4 = strassen(a22, b21 - b11)
    m5 = strassen(a11 + a22, b11 + b22)
    m6 = strassen(a12 - a22, b21 + b22)
    m7 = strassen(a11 - a21, b11 + b12)

    c11 = m5 + m4 - m2 + m6
    c12 = m1 + m2
    c21 = m3 + m4
    c22 = m1 + m5 - m3 - m7

    c = np.empty_like(x)
    c[:half_n, :half_n] = c11
    c[:half_n, half_n:] = c12
    c[half_n:, :half_n] = c21
    c[half_n:, half_n:] = c22

    return c

x = np.array([[1, 2], [3, 4]])
y = np.array([[5, 6], [7, 8]])

z = strassen(x, y)
print(z)
